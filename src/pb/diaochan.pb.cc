// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diaochan.proto

#include "diaochan.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_basic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FeatList_basic_2eproto;
namespace diaochan {
class RecallRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecallRequest> _instance;
} _RecallRequest_default_instance_;
class RecallReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecallReply> _instance;
} _RecallReply_default_instance_;
class StatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusRequest> _instance;
} _StatusRequest_default_instance_;
class StatusReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusReply> _instance;
} _StatusReply_default_instance_;
}  // namespace diaochan
static void InitDefaultsscc_info_RecallReply_diaochan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diaochan::_RecallReply_default_instance_;
    new (ptr) ::diaochan::RecallReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecallReply_diaochan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RecallReply_diaochan_2eproto}, {
      &scc_info_FeatList_basic_2eproto.base,}};

static void InitDefaultsscc_info_RecallRequest_diaochan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diaochan::_RecallRequest_default_instance_;
    new (ptr) ::diaochan::RecallRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecallRequest_diaochan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RecallRequest_diaochan_2eproto}, {
      &scc_info_FeatList_basic_2eproto.base,}};

static void InitDefaultsscc_info_StatusReply_diaochan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diaochan::_StatusReply_default_instance_;
    new (ptr) ::diaochan::StatusReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusReply_diaochan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusReply_diaochan_2eproto}, {}};

static void InitDefaultsscc_info_StatusRequest_diaochan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diaochan::_StatusRequest_default_instance_;
    new (ptr) ::diaochan::StatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusRequest_diaochan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusRequest_diaochan_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_diaochan_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_diaochan_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_diaochan_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_diaochan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::diaochan::RecallRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::diaochan::RecallRequest, bid_),
  PROTOBUF_FIELD_OFFSET(::diaochan::RecallRequest, uid_),
  PROTOBUF_FIELD_OFFSET(::diaochan::RecallRequest, mid_),
  PROTOBUF_FIELD_OFFSET(::diaochan::RecallRequest, channel_),
  PROTOBUF_FIELD_OFFSET(::diaochan::RecallRequest, version_),
  PROTOBUF_FIELD_OFFSET(::diaochan::RecallRequest, context_),
  PROTOBUF_FIELD_OFFSET(::diaochan::RecallRequest, num_),
  PROTOBUF_FIELD_OFFSET(::diaochan::RecallRequest, debug_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::diaochan::RecallReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::diaochan::RecallReply, bid_),
  PROTOBUF_FIELD_OFFSET(::diaochan::RecallReply, status_),
  PROTOBUF_FIELD_OFFSET(::diaochan::RecallReply, errmsg_),
  PROTOBUF_FIELD_OFFSET(::diaochan::RecallReply, mid_),
  PROTOBUF_FIELD_OFFSET(::diaochan::RecallReply, mscore_),
  PROTOBUF_FIELD_OFFSET(::diaochan::RecallReply, mfeas_),
  PROTOBUF_FIELD_OFFSET(::diaochan::RecallReply, otherfeas_),
  PROTOBUF_FIELD_OFFSET(::diaochan::RecallReply, debuginfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::diaochan::StatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::diaochan::StatusReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::diaochan::StatusReply, status_),
  PROTOBUF_FIELD_OFFSET(::diaochan::StatusReply, detail_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::diaochan::RecallRequest)},
  { 13, -1, sizeof(::diaochan::RecallReply)},
  { 26, -1, sizeof(::diaochan::StatusRequest)},
  { 31, -1, sizeof(::diaochan::StatusReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::diaochan::_RecallRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::diaochan::_RecallReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::diaochan::_StatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::diaochan::_StatusReply_default_instance_),
};

const char descriptor_table_protodef_diaochan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016diaochan.proto\022\010diaochan\032\013basic.proto\""
  "\220\001\n\rRecallRequest\022\013\n\003bid\030\001 \001(\t\022\013\n\003uid\030\002 "
  "\001(\t\022\013\n\003mid\030\003 \001(\t\022\017\n\007channel\030\004 \001(\t\022\017\n\007ver"
  "sion\030\005 \001(\t\022\032\n\007context\030\006 \001(\0132\t.FeatList\022\013"
  "\n\003num\030\007 \001(\005\022\r\n\005debug\030\010 \001(\010\"\242\001\n\013RecallRep"
  "ly\022\013\n\003bid\030\001 \001(\t\022\016\n\006status\030\002 \001(\005\022\016\n\006errms"
  "g\030\003 \001(\t\022\013\n\003mid\030\004 \003(\t\022\016\n\006mscore\030\005 \003(\002\022\030\n\005"
  "mfeas\030\006 \003(\0132\t.FeatList\022\034\n\totherfeas\030\007 \001("
  "\0132\t.FeatList\022\021\n\tdebuginfo\030\010 \003(\t\"\017\n\rStatu"
  "sRequest\"-\n\013StatusReply\022\016\n\006status\030\001 \001(\010\022"
  "\016\n\006detail\030\002 \003(\t2\203\003\n\010Diaochan\022:\n\006Recall\022\027"
  ".diaochan.RecallRequest\032\025.diaochan.Recal"
  "lReply\"\000\022=\n\tRecallVvs\022\027.diaochan.RecallR"
  "equest\032\025.diaochan.RecallReply\"\000\022\?\n\013Recal"
  "lEsTag\022\027.diaochan.RecallRequest\032\025.diaoch"
  "an.RecallReply\"\000\022\?\n\013RecallBlack\022\027.diaoch"
  "an.RecallRequest\032\025.diaochan.RecallReply\""
  "\000\022>\n\nRecallDssm\022\027.diaochan.RecallRequest"
  "\032\025.diaochan.RecallReply\"\000\022:\n\006Status\022\027.di"
  "aochan.StatusRequest\032\025.diaochan.StatusRe"
  "ply\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_diaochan_2eproto_deps[1] = {
  &::descriptor_table_basic_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_diaochan_2eproto_sccs[4] = {
  &scc_info_RecallReply_diaochan_2eproto.base,
  &scc_info_RecallRequest_diaochan_2eproto.base,
  &scc_info_StatusReply_diaochan_2eproto.base,
  &scc_info_StatusRequest_diaochan_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_diaochan_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_diaochan_2eproto = {
  false, false, descriptor_table_protodef_diaochan_2eproto, "diaochan.proto", 813,
  &descriptor_table_diaochan_2eproto_once, descriptor_table_diaochan_2eproto_sccs, descriptor_table_diaochan_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_diaochan_2eproto::offsets,
  file_level_metadata_diaochan_2eproto, 4, file_level_enum_descriptors_diaochan_2eproto, file_level_service_descriptors_diaochan_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_diaochan_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_diaochan_2eproto)), true);
namespace diaochan {

// ===================================================================

class RecallRequest::_Internal {
 public:
  static const ::FeatList& context(const RecallRequest* msg);
};

const ::FeatList&
RecallRequest::_Internal::context(const RecallRequest* msg) {
  return *msg->context_;
}
void RecallRequest::clear_context() {
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
}
RecallRequest::RecallRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diaochan.RecallRequest)
}
RecallRequest::RecallRequest(const RecallRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bid().empty()) {
    bid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bid(), 
      GetArena());
  }
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uid().empty()) {
    uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uid(), 
      GetArena());
  }
  mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mid().empty()) {
    mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mid(), 
      GetArena());
  }
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel().empty()) {
    channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  if (from._internal_has_context()) {
    context_ = new ::FeatList(*from.context_);
  } else {
    context_ = nullptr;
  }
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&debug_) -
    reinterpret_cast<char*>(&num_)) + sizeof(debug_));
  // @@protoc_insertion_point(copy_constructor:diaochan.RecallRequest)
}

void RecallRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecallRequest_diaochan_2eproto.base);
  bid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&context_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&debug_) -
      reinterpret_cast<char*>(&context_)) + sizeof(debug_));
}

RecallRequest::~RecallRequest() {
  // @@protoc_insertion_point(destructor:diaochan.RecallRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecallRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void RecallRequest::ArenaDtor(void* object) {
  RecallRequest* _this = reinterpret_cast< RecallRequest* >(object);
  (void)_this;
}
void RecallRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecallRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecallRequest& RecallRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecallRequest_diaochan_2eproto.base);
  return *internal_default_instance();
}


void RecallRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:diaochan.RecallRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bid_.ClearToEmpty();
  uid_.ClearToEmpty();
  mid_.ClearToEmpty();
  channel_.ClearToEmpty();
  version_.ClearToEmpty();
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debug_) -
      reinterpret_cast<char*>(&num_)) + sizeof(debug_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecallRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string bid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "diaochan.RecallRequest.bid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "diaochan.RecallRequest.uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "diaochan.RecallRequest.mid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_channel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "diaochan.RecallRequest.channel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "diaochan.RecallRequest.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FeatList context = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool debug = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecallRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:diaochan.RecallRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bid = 1;
  if (this->bid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bid().data(), static_cast<int>(this->_internal_bid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "diaochan.RecallRequest.bid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bid(), target);
  }

  // string uid = 2;
  if (this->uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "diaochan.RecallRequest.uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uid(), target);
  }

  // string mid = 3;
  if (this->mid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mid().data(), static_cast<int>(this->_internal_mid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "diaochan.RecallRequest.mid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mid(), target);
  }

  // string channel = 4;
  if (this->channel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel().data(), static_cast<int>(this->_internal_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "diaochan.RecallRequest.channel");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_channel(), target);
  }

  // string version = 5;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "diaochan.RecallRequest.version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_version(), target);
  }

  // .FeatList context = 6;
  if (this->has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::context(this), target, stream);
  }

  // int32 num = 7;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_num(), target);
  }

  // bool debug = 8;
  if (this->debug() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_debug(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diaochan.RecallRequest)
  return target;
}

size_t RecallRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diaochan.RecallRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bid = 1;
  if (this->bid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bid());
  }

  // string uid = 2;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string mid = 3;
  if (this->mid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mid());
  }

  // string channel = 4;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel());
  }

  // string version = 5;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .FeatList context = 6;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // int32 num = 7;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // bool debug = 8;
  if (this->debug() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecallRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diaochan.RecallRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecallRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecallRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diaochan.RecallRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diaochan.RecallRequest)
    MergeFrom(*source);
  }
}

void RecallRequest::MergeFrom(const RecallRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diaochan.RecallRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bid().size() > 0) {
    _internal_set_bid(from._internal_bid());
  }
  if (from.uid().size() > 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.mid().size() > 0) {
    _internal_set_mid(from._internal_mid());
  }
  if (from.channel().size() > 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.has_context()) {
    _internal_mutable_context()->::FeatList::MergeFrom(from._internal_context());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.debug() != 0) {
    _internal_set_debug(from._internal_debug());
  }
}

void RecallRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diaochan.RecallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecallRequest::CopyFrom(const RecallRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diaochan.RecallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecallRequest::IsInitialized() const {
  return true;
}

void RecallRequest::InternalSwap(RecallRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bid_.Swap(&other->bid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uid_.Swap(&other->uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mid_.Swap(&other->mid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel_.Swap(&other->channel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecallRequest, debug_)
      + sizeof(RecallRequest::debug_)
      - PROTOBUF_FIELD_OFFSET(RecallRequest, context_)>(
          reinterpret_cast<char*>(&context_),
          reinterpret_cast<char*>(&other->context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecallRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RecallReply::_Internal {
 public:
  static const ::FeatList& otherfeas(const RecallReply* msg);
};

const ::FeatList&
RecallReply::_Internal::otherfeas(const RecallReply* msg) {
  return *msg->otherfeas_;
}
void RecallReply::clear_mfeas() {
  mfeas_.Clear();
}
void RecallReply::clear_otherfeas() {
  if (GetArena() == nullptr && otherfeas_ != nullptr) {
    delete otherfeas_;
  }
  otherfeas_ = nullptr;
}
RecallReply::RecallReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mid_(arena),
  mscore_(arena),
  mfeas_(arena),
  debuginfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diaochan.RecallReply)
}
RecallReply::RecallReply(const RecallReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mid_(from.mid_),
      mscore_(from.mscore_),
      mfeas_(from.mfeas_),
      debuginfo_(from.debuginfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bid().empty()) {
    bid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bid(), 
      GetArena());
  }
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errmsg(), 
      GetArena());
  }
  if (from._internal_has_otherfeas()) {
    otherfeas_ = new ::FeatList(*from.otherfeas_);
  } else {
    otherfeas_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:diaochan.RecallReply)
}

void RecallReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecallReply_diaochan_2eproto.base);
  bid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&otherfeas_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&otherfeas_)) + sizeof(status_));
}

RecallReply::~RecallReply() {
  // @@protoc_insertion_point(destructor:diaochan.RecallReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecallReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete otherfeas_;
}

void RecallReply::ArenaDtor(void* object) {
  RecallReply* _this = reinterpret_cast< RecallReply* >(object);
  (void)_this;
}
void RecallReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecallReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecallReply& RecallReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecallReply_diaochan_2eproto.base);
  return *internal_default_instance();
}


void RecallReply::Clear() {
// @@protoc_insertion_point(message_clear_start:diaochan.RecallReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mid_.Clear();
  mscore_.Clear();
  mfeas_.Clear();
  debuginfo_.Clear();
  bid_.ClearToEmpty();
  errmsg_.ClearToEmpty();
  if (GetArena() == nullptr && otherfeas_ != nullptr) {
    delete otherfeas_;
  }
  otherfeas_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecallReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string bid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "diaochan.RecallReply.bid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "diaochan.RecallReply.errmsg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string mid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_mid();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "diaochan.RecallReply.mid"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float mscore = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_mscore(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_mscore(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .FeatList mfeas = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mfeas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .FeatList otherfeas = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_otherfeas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string debuginfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_debuginfo();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "diaochan.RecallReply.debuginfo"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecallReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:diaochan.RecallReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bid = 1;
  if (this->bid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bid().data(), static_cast<int>(this->_internal_bid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "diaochan.RecallReply.bid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bid(), target);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "diaochan.RecallReply.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // repeated string mid = 4;
  for (int i = 0, n = this->_internal_mid_size(); i < n; i++) {
    const auto& s = this->_internal_mid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "diaochan.RecallReply.mid");
    target = stream->WriteString(4, s, target);
  }

  // repeated float mscore = 5;
  if (this->_internal_mscore_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_mscore(), target);
  }

  // repeated .FeatList mfeas = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mfeas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_mfeas(i), target, stream);
  }

  // .FeatList otherfeas = 7;
  if (this->has_otherfeas()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::otherfeas(this), target, stream);
  }

  // repeated string debuginfo = 8;
  for (int i = 0, n = this->_internal_debuginfo_size(); i < n; i++) {
    const auto& s = this->_internal_debuginfo(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "diaochan.RecallReply.debuginfo");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diaochan.RecallReply)
  return target;
}

size_t RecallReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diaochan.RecallReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string mid = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(mid_.size());
  for (int i = 0, n = mid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      mid_.Get(i));
  }

  // repeated float mscore = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mscore_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mscore_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .FeatList mfeas = 6;
  total_size += 1UL * this->_internal_mfeas_size();
  for (const auto& msg : this->mfeas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string debuginfo = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(debuginfo_.size());
  for (int i = 0, n = debuginfo_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      debuginfo_.Get(i));
  }

  // string bid = 1;
  if (this->bid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bid());
  }

  // string errmsg = 3;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // .FeatList otherfeas = 7;
  if (this->has_otherfeas()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *otherfeas_);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecallReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diaochan.RecallReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RecallReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecallReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diaochan.RecallReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diaochan.RecallReply)
    MergeFrom(*source);
  }
}

void RecallReply::MergeFrom(const RecallReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diaochan.RecallReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mid_.MergeFrom(from.mid_);
  mscore_.MergeFrom(from.mscore_);
  mfeas_.MergeFrom(from.mfeas_);
  debuginfo_.MergeFrom(from.debuginfo_);
  if (from.bid().size() > 0) {
    _internal_set_bid(from._internal_bid());
  }
  if (from.errmsg().size() > 0) {
    _internal_set_errmsg(from._internal_errmsg());
  }
  if (from.has_otherfeas()) {
    _internal_mutable_otherfeas()->::FeatList::MergeFrom(from._internal_otherfeas());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void RecallReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diaochan.RecallReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecallReply::CopyFrom(const RecallReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diaochan.RecallReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecallReply::IsInitialized() const {
  return true;
}

void RecallReply::InternalSwap(RecallReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mid_.InternalSwap(&other->mid_);
  mscore_.InternalSwap(&other->mscore_);
  mfeas_.InternalSwap(&other->mfeas_);
  debuginfo_.InternalSwap(&other->debuginfo_);
  bid_.Swap(&other->bid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  errmsg_.Swap(&other->errmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecallReply, status_)
      + sizeof(RecallReply::status_)
      - PROTOBUF_FIELD_OFFSET(RecallReply, otherfeas_)>(
          reinterpret_cast<char*>(&otherfeas_),
          reinterpret_cast<char*>(&other->otherfeas_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecallReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusRequest::_Internal {
 public:
};

StatusRequest::StatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diaochan.StatusRequest)
}
StatusRequest::StatusRequest(const StatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:diaochan.StatusRequest)
}

void StatusRequest::SharedCtor() {
}

StatusRequest::~StatusRequest() {
  // @@protoc_insertion_point(destructor:diaochan.StatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StatusRequest::ArenaDtor(void* object) {
  StatusRequest* _this = reinterpret_cast< StatusRequest* >(object);
  (void)_this;
}
void StatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusRequest& StatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusRequest_diaochan_2eproto.base);
  return *internal_default_instance();
}


void StatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:diaochan.StatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:diaochan.StatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diaochan.StatusRequest)
  return target;
}

size_t StatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diaochan.StatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diaochan.StatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diaochan.StatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diaochan.StatusRequest)
    MergeFrom(*source);
  }
}

void StatusRequest::MergeFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diaochan.StatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diaochan.StatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusRequest::CopyFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diaochan.StatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRequest::IsInitialized() const {
  return true;
}

void StatusRequest::InternalSwap(StatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusReply::_Internal {
 public:
};

StatusReply::StatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  detail_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diaochan.StatusReply)
}
StatusReply::StatusReply(const StatusReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      detail_(from.detail_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:diaochan.StatusReply)
}

void StatusReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusReply_diaochan_2eproto.base);
  status_ = false;
}

StatusReply::~StatusReply() {
  // @@protoc_insertion_point(destructor:diaochan.StatusReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StatusReply::ArenaDtor(void* object) {
  StatusReply* _this = reinterpret_cast< StatusReply* >(object);
  (void)_this;
}
void StatusReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusReply& StatusReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusReply_diaochan_2eproto.base);
  return *internal_default_instance();
}


void StatusReply::Clear() {
// @@protoc_insertion_point(message_clear_start:diaochan.StatusReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_.Clear();
  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_detail();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "diaochan.StatusReply.detail"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:diaochan.StatusReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // repeated string detail = 2;
  for (int i = 0, n = this->_internal_detail_size(); i < n; i++) {
    const auto& s = this->_internal_detail(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "diaochan.StatusReply.detail");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diaochan.StatusReply)
  return target;
}

size_t StatusReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diaochan.StatusReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string detail = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(detail_.size());
  for (int i = 0, n = detail_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      detail_.Get(i));
  }

  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diaochan.StatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diaochan.StatusReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diaochan.StatusReply)
    MergeFrom(*source);
  }
}

void StatusReply::MergeFrom(const StatusReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diaochan.StatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detail_.MergeFrom(from.detail_);
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void StatusReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diaochan.StatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusReply::CopyFrom(const StatusReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diaochan.StatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusReply::IsInitialized() const {
  return true;
}

void StatusReply::InternalSwap(StatusReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  detail_.InternalSwap(&other->detail_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace diaochan
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::diaochan::RecallRequest* Arena::CreateMaybeMessage< ::diaochan::RecallRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diaochan::RecallRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::diaochan::RecallReply* Arena::CreateMaybeMessage< ::diaochan::RecallReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diaochan::RecallReply >(arena);
}
template<> PROTOBUF_NOINLINE ::diaochan::StatusRequest* Arena::CreateMaybeMessage< ::diaochan::StatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diaochan::StatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::diaochan::StatusReply* Arena::CreateMaybeMessage< ::diaochan::StatusReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diaochan::StatusReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
