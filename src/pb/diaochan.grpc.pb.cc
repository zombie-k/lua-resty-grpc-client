// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: diaochan.proto

#include "diaochan.pb.h"
#include "diaochan.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace diaochan {

static const char* Diaochan_method_names[] = {
  "/diaochan.Diaochan/Recall",
  "/diaochan.Diaochan/RecallVvs",
  "/diaochan.Diaochan/RecallEsTag",
  "/diaochan.Diaochan/RecallBlack",
  "/diaochan.Diaochan/RecallDssm",
  "/diaochan.Diaochan/Status",
};

std::unique_ptr< Diaochan::Stub> Diaochan::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Diaochan::Stub> stub(new Diaochan::Stub(channel));
  return stub;
}

Diaochan::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Recall_(Diaochan_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecallVvs_(Diaochan_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecallEsTag_(Diaochan_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecallBlack_(Diaochan_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecallDssm_(Diaochan_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Status_(Diaochan_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Diaochan::Stub::Recall(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::diaochan::RecallReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::diaochan::RecallRequest, ::diaochan::RecallReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Recall_, context, request, response);
}

void Diaochan::Stub::experimental_async::Recall(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::diaochan::RecallRequest, ::diaochan::RecallReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Recall_, context, request, response, std::move(f));
}

void Diaochan::Stub::experimental_async::Recall(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Recall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* Diaochan::Stub::PrepareAsyncRecallRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::diaochan::RecallReply, ::diaochan::RecallRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Recall_, context, request);
}

::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* Diaochan::Stub::AsyncRecallRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRecallRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Diaochan::Stub::RecallVvs(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::diaochan::RecallReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::diaochan::RecallRequest, ::diaochan::RecallReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RecallVvs_, context, request, response);
}

void Diaochan::Stub::experimental_async::RecallVvs(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::diaochan::RecallRequest, ::diaochan::RecallReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecallVvs_, context, request, response, std::move(f));
}

void Diaochan::Stub::experimental_async::RecallVvs(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecallVvs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* Diaochan::Stub::PrepareAsyncRecallVvsRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::diaochan::RecallReply, ::diaochan::RecallRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RecallVvs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* Diaochan::Stub::AsyncRecallVvsRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRecallVvsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Diaochan::Stub::RecallEsTag(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::diaochan::RecallReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::diaochan::RecallRequest, ::diaochan::RecallReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RecallEsTag_, context, request, response);
}

void Diaochan::Stub::experimental_async::RecallEsTag(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::diaochan::RecallRequest, ::diaochan::RecallReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecallEsTag_, context, request, response, std::move(f));
}

void Diaochan::Stub::experimental_async::RecallEsTag(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecallEsTag_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* Diaochan::Stub::PrepareAsyncRecallEsTagRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::diaochan::RecallReply, ::diaochan::RecallRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RecallEsTag_, context, request);
}

::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* Diaochan::Stub::AsyncRecallEsTagRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRecallEsTagRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Diaochan::Stub::RecallBlack(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::diaochan::RecallReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::diaochan::RecallRequest, ::diaochan::RecallReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RecallBlack_, context, request, response);
}

void Diaochan::Stub::experimental_async::RecallBlack(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::diaochan::RecallRequest, ::diaochan::RecallReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecallBlack_, context, request, response, std::move(f));
}

void Diaochan::Stub::experimental_async::RecallBlack(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecallBlack_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* Diaochan::Stub::PrepareAsyncRecallBlackRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::diaochan::RecallReply, ::diaochan::RecallRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RecallBlack_, context, request);
}

::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* Diaochan::Stub::AsyncRecallBlackRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRecallBlackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Diaochan::Stub::RecallDssm(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::diaochan::RecallReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::diaochan::RecallRequest, ::diaochan::RecallReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RecallDssm_, context, request, response);
}

void Diaochan::Stub::experimental_async::RecallDssm(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::diaochan::RecallRequest, ::diaochan::RecallReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecallDssm_, context, request, response, std::move(f));
}

void Diaochan::Stub::experimental_async::RecallDssm(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecallDssm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* Diaochan::Stub::PrepareAsyncRecallDssmRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::diaochan::RecallReply, ::diaochan::RecallRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RecallDssm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* Diaochan::Stub::AsyncRecallDssmRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRecallDssmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Diaochan::Stub::Status(::grpc::ClientContext* context, const ::diaochan::StatusRequest& request, ::diaochan::StatusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::diaochan::StatusRequest, ::diaochan::StatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Status_, context, request, response);
}

void Diaochan::Stub::experimental_async::Status(::grpc::ClientContext* context, const ::diaochan::StatusRequest* request, ::diaochan::StatusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::diaochan::StatusRequest, ::diaochan::StatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, std::move(f));
}

void Diaochan::Stub::experimental_async::Status(::grpc::ClientContext* context, const ::diaochan::StatusRequest* request, ::diaochan::StatusReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::diaochan::StatusReply>* Diaochan::Stub::PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::diaochan::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::diaochan::StatusReply, ::diaochan::StatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Status_, context, request);
}

::grpc::ClientAsyncResponseReader< ::diaochan::StatusReply>* Diaochan::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::diaochan::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

Diaochan::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Diaochan_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Diaochan::Service, ::diaochan::RecallRequest, ::diaochan::RecallReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Diaochan::Service* service,
             ::grpc::ServerContext* ctx,
             const ::diaochan::RecallRequest* req,
             ::diaochan::RecallReply* resp) {
               return service->Recall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Diaochan_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Diaochan::Service, ::diaochan::RecallRequest, ::diaochan::RecallReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Diaochan::Service* service,
             ::grpc::ServerContext* ctx,
             const ::diaochan::RecallRequest* req,
             ::diaochan::RecallReply* resp) {
               return service->RecallVvs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Diaochan_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Diaochan::Service, ::diaochan::RecallRequest, ::diaochan::RecallReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Diaochan::Service* service,
             ::grpc::ServerContext* ctx,
             const ::diaochan::RecallRequest* req,
             ::diaochan::RecallReply* resp) {
               return service->RecallEsTag(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Diaochan_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Diaochan::Service, ::diaochan::RecallRequest, ::diaochan::RecallReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Diaochan::Service* service,
             ::grpc::ServerContext* ctx,
             const ::diaochan::RecallRequest* req,
             ::diaochan::RecallReply* resp) {
               return service->RecallBlack(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Diaochan_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Diaochan::Service, ::diaochan::RecallRequest, ::diaochan::RecallReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Diaochan::Service* service,
             ::grpc::ServerContext* ctx,
             const ::diaochan::RecallRequest* req,
             ::diaochan::RecallReply* resp) {
               return service->RecallDssm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Diaochan_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Diaochan::Service, ::diaochan::StatusRequest, ::diaochan::StatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Diaochan::Service* service,
             ::grpc::ServerContext* ctx,
             const ::diaochan::StatusRequest* req,
             ::diaochan::StatusReply* resp) {
               return service->Status(ctx, req, resp);
             }, this)));
}

Diaochan::Service::~Service() {
}

::grpc::Status Diaochan::Service::Recall(::grpc::ServerContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Diaochan::Service::RecallVvs(::grpc::ServerContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Diaochan::Service::RecallEsTag(::grpc::ServerContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Diaochan::Service::RecallBlack(::grpc::ServerContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Diaochan::Service::RecallDssm(::grpc::ServerContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Diaochan::Service::Status(::grpc::ServerContext* context, const ::diaochan::StatusRequest* request, ::diaochan::StatusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace diaochan

