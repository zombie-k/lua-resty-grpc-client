// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diaochan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_diaochan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_diaochan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_diaochan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_diaochan_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_diaochan_2eproto;
namespace diaochan {
class RecallReply;
class RecallReplyDefaultTypeInternal;
extern RecallReplyDefaultTypeInternal _RecallReply_default_instance_;
class RecallRequest;
class RecallRequestDefaultTypeInternal;
extern RecallRequestDefaultTypeInternal _RecallRequest_default_instance_;
class StatusReply;
class StatusReplyDefaultTypeInternal;
extern StatusReplyDefaultTypeInternal _StatusReply_default_instance_;
class StatusRequest;
class StatusRequestDefaultTypeInternal;
extern StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
}  // namespace diaochan
PROTOBUF_NAMESPACE_OPEN
template<> ::diaochan::RecallReply* Arena::CreateMaybeMessage<::diaochan::RecallReply>(Arena*);
template<> ::diaochan::RecallRequest* Arena::CreateMaybeMessage<::diaochan::RecallRequest>(Arena*);
template<> ::diaochan::StatusReply* Arena::CreateMaybeMessage<::diaochan::StatusReply>(Arena*);
template<> ::diaochan::StatusRequest* Arena::CreateMaybeMessage<::diaochan::StatusRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace diaochan {

// ===================================================================

class RecallRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:diaochan.RecallRequest) */ {
 public:
  inline RecallRequest() : RecallRequest(nullptr) {}
  virtual ~RecallRequest();

  RecallRequest(const RecallRequest& from);
  RecallRequest(RecallRequest&& from) noexcept
    : RecallRequest() {
    *this = ::std::move(from);
  }

  inline RecallRequest& operator=(const RecallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecallRequest& operator=(RecallRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecallRequest& default_instance();

  static inline const RecallRequest* internal_default_instance() {
    return reinterpret_cast<const RecallRequest*>(
               &_RecallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecallRequest& a, RecallRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RecallRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecallRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecallRequest* New() const final {
    return CreateMaybeMessage<RecallRequest>(nullptr);
  }

  RecallRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecallRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecallRequest& from);
  void MergeFrom(const RecallRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecallRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "diaochan.RecallRequest";
  }
  protected:
  explicit RecallRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_diaochan_2eproto);
    return ::descriptor_table_diaochan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBidFieldNumber = 1,
    kUidFieldNumber = 2,
    kMidFieldNumber = 3,
    kChannelFieldNumber = 4,
    kVersionFieldNumber = 5,
    kContextFieldNumber = 6,
    kNumFieldNumber = 7,
    kDebugFieldNumber = 8,
  };
  // string bid = 1;
  void clear_bid();
  const std::string& bid() const;
  void set_bid(const std::string& value);
  void set_bid(std::string&& value);
  void set_bid(const char* value);
  void set_bid(const char* value, size_t size);
  std::string* mutable_bid();
  std::string* release_bid();
  void set_allocated_bid(std::string* bid);
  private:
  const std::string& _internal_bid() const;
  void _internal_set_bid(const std::string& value);
  std::string* _internal_mutable_bid();
  public:

  // string uid = 2;
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string mid = 3;
  void clear_mid();
  const std::string& mid() const;
  void set_mid(const std::string& value);
  void set_mid(std::string&& value);
  void set_mid(const char* value);
  void set_mid(const char* value, size_t size);
  std::string* mutable_mid();
  std::string* release_mid();
  void set_allocated_mid(std::string* mid);
  private:
  const std::string& _internal_mid() const;
  void _internal_set_mid(const std::string& value);
  std::string* _internal_mutable_mid();
  public:

  // string channel = 4;
  void clear_channel();
  const std::string& channel() const;
  void set_channel(const std::string& value);
  void set_channel(std::string&& value);
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  std::string* mutable_channel();
  std::string* release_channel();
  void set_allocated_channel(std::string* channel);
  private:
  const std::string& _internal_channel() const;
  void _internal_set_channel(const std::string& value);
  std::string* _internal_mutable_channel();
  public:

  // string version = 5;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .FeatList context = 6;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::FeatList& context() const;
  ::FeatList* release_context();
  ::FeatList* mutable_context();
  void set_allocated_context(::FeatList* context);
  private:
  const ::FeatList& _internal_context() const;
  ::FeatList* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::FeatList* context);
  ::FeatList* unsafe_arena_release_context();

  // int32 num = 7;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool debug = 8;
  void clear_debug();
  bool debug() const;
  void set_debug(bool value);
  private:
  bool _internal_debug() const;
  void _internal_set_debug(bool value);
  public:

  // @@protoc_insertion_point(class_scope:diaochan.RecallRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::FeatList* context_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  bool debug_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_diaochan_2eproto;
};
// -------------------------------------------------------------------

class RecallReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:diaochan.RecallReply) */ {
 public:
  inline RecallReply() : RecallReply(nullptr) {}
  virtual ~RecallReply();

  RecallReply(const RecallReply& from);
  RecallReply(RecallReply&& from) noexcept
    : RecallReply() {
    *this = ::std::move(from);
  }

  inline RecallReply& operator=(const RecallReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecallReply& operator=(RecallReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecallReply& default_instance();

  static inline const RecallReply* internal_default_instance() {
    return reinterpret_cast<const RecallReply*>(
               &_RecallReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RecallReply& a, RecallReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RecallReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecallReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecallReply* New() const final {
    return CreateMaybeMessage<RecallReply>(nullptr);
  }

  RecallReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecallReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecallReply& from);
  void MergeFrom(const RecallReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecallReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "diaochan.RecallReply";
  }
  protected:
  explicit RecallReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_diaochan_2eproto);
    return ::descriptor_table_diaochan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMidFieldNumber = 4,
    kMscoreFieldNumber = 5,
    kMfeasFieldNumber = 6,
    kDebuginfoFieldNumber = 8,
    kBidFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kOtherfeasFieldNumber = 7,
    kStatusFieldNumber = 2,
  };
  // repeated string mid = 4;
  int mid_size() const;
  private:
  int _internal_mid_size() const;
  public:
  void clear_mid();
  const std::string& mid(int index) const;
  std::string* mutable_mid(int index);
  void set_mid(int index, const std::string& value);
  void set_mid(int index, std::string&& value);
  void set_mid(int index, const char* value);
  void set_mid(int index, const char* value, size_t size);
  std::string* add_mid();
  void add_mid(const std::string& value);
  void add_mid(std::string&& value);
  void add_mid(const char* value);
  void add_mid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mid();
  private:
  const std::string& _internal_mid(int index) const;
  std::string* _internal_add_mid();
  public:

  // repeated float mscore = 5;
  int mscore_size() const;
  private:
  int _internal_mscore_size() const;
  public:
  void clear_mscore();
  private:
  float _internal_mscore(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_mscore() const;
  void _internal_add_mscore(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_mscore();
  public:
  float mscore(int index) const;
  void set_mscore(int index, float value);
  void add_mscore(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mscore() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mscore();

  // repeated .FeatList mfeas = 6;
  int mfeas_size() const;
  private:
  int _internal_mfeas_size() const;
  public:
  void clear_mfeas();
  ::FeatList* mutable_mfeas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FeatList >*
      mutable_mfeas();
  private:
  const ::FeatList& _internal_mfeas(int index) const;
  ::FeatList* _internal_add_mfeas();
  public:
  const ::FeatList& mfeas(int index) const;
  ::FeatList* add_mfeas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FeatList >&
      mfeas() const;

  // repeated string debuginfo = 8;
  int debuginfo_size() const;
  private:
  int _internal_debuginfo_size() const;
  public:
  void clear_debuginfo();
  const std::string& debuginfo(int index) const;
  std::string* mutable_debuginfo(int index);
  void set_debuginfo(int index, const std::string& value);
  void set_debuginfo(int index, std::string&& value);
  void set_debuginfo(int index, const char* value);
  void set_debuginfo(int index, const char* value, size_t size);
  std::string* add_debuginfo();
  void add_debuginfo(const std::string& value);
  void add_debuginfo(std::string&& value);
  void add_debuginfo(const char* value);
  void add_debuginfo(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& debuginfo() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_debuginfo();
  private:
  const std::string& _internal_debuginfo(int index) const;
  std::string* _internal_add_debuginfo();
  public:

  // string bid = 1;
  void clear_bid();
  const std::string& bid() const;
  void set_bid(const std::string& value);
  void set_bid(std::string&& value);
  void set_bid(const char* value);
  void set_bid(const char* value, size_t size);
  std::string* mutable_bid();
  std::string* release_bid();
  void set_allocated_bid(std::string* bid);
  private:
  const std::string& _internal_bid() const;
  void _internal_set_bid(const std::string& value);
  std::string* _internal_mutable_bid();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // .FeatList otherfeas = 7;
  bool has_otherfeas() const;
  private:
  bool _internal_has_otherfeas() const;
  public:
  void clear_otherfeas();
  const ::FeatList& otherfeas() const;
  ::FeatList* release_otherfeas();
  ::FeatList* mutable_otherfeas();
  void set_allocated_otherfeas(::FeatList* otherfeas);
  private:
  const ::FeatList& _internal_otherfeas() const;
  ::FeatList* _internal_mutable_otherfeas();
  public:
  void unsafe_arena_set_allocated_otherfeas(
      ::FeatList* otherfeas);
  ::FeatList* unsafe_arena_release_otherfeas();

  // int32 status = 2;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:diaochan.RecallReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mscore_;
  mutable std::atomic<int> _mscore_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FeatList > mfeas_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> debuginfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::FeatList* otherfeas_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_diaochan_2eproto;
};
// -------------------------------------------------------------------

class StatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:diaochan.StatusRequest) */ {
 public:
  inline StatusRequest() : StatusRequest(nullptr) {}
  virtual ~StatusRequest();

  StatusRequest(const StatusRequest& from);
  StatusRequest(StatusRequest&& from) noexcept
    : StatusRequest() {
    *this = ::std::move(from);
  }

  inline StatusRequest& operator=(const StatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusRequest& operator=(StatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusRequest& default_instance();

  static inline const StatusRequest* internal_default_instance() {
    return reinterpret_cast<const StatusRequest*>(
               &_StatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StatusRequest& a, StatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusRequest* New() const final {
    return CreateMaybeMessage<StatusRequest>(nullptr);
  }

  StatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusRequest& from);
  void MergeFrom(const StatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "diaochan.StatusRequest";
  }
  protected:
  explicit StatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_diaochan_2eproto);
    return ::descriptor_table_diaochan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:diaochan.StatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_diaochan_2eproto;
};
// -------------------------------------------------------------------

class StatusReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:diaochan.StatusReply) */ {
 public:
  inline StatusReply() : StatusReply(nullptr) {}
  virtual ~StatusReply();

  StatusReply(const StatusReply& from);
  StatusReply(StatusReply&& from) noexcept
    : StatusReply() {
    *this = ::std::move(from);
  }

  inline StatusReply& operator=(const StatusReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusReply& operator=(StatusReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusReply& default_instance();

  static inline const StatusReply* internal_default_instance() {
    return reinterpret_cast<const StatusReply*>(
               &_StatusReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StatusReply& a, StatusReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusReply* New() const final {
    return CreateMaybeMessage<StatusReply>(nullptr);
  }

  StatusReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusReply& from);
  void MergeFrom(const StatusReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "diaochan.StatusReply";
  }
  protected:
  explicit StatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_diaochan_2eproto);
    return ::descriptor_table_diaochan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string detail = 2;
  int detail_size() const;
  private:
  int _internal_detail_size() const;
  public:
  void clear_detail();
  const std::string& detail(int index) const;
  std::string* mutable_detail(int index);
  void set_detail(int index, const std::string& value);
  void set_detail(int index, std::string&& value);
  void set_detail(int index, const char* value);
  void set_detail(int index, const char* value, size_t size);
  std::string* add_detail();
  void add_detail(const std::string& value);
  void add_detail(std::string&& value);
  void add_detail(const char* value);
  void add_detail(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& detail() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_detail();
  private:
  const std::string& _internal_detail(int index) const;
  std::string* _internal_add_detail();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:diaochan.StatusReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> detail_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_diaochan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecallRequest

// string bid = 1;
inline void RecallRequest::clear_bid() {
  bid_.ClearToEmpty();
}
inline const std::string& RecallRequest::bid() const {
  // @@protoc_insertion_point(field_get:diaochan.RecallRequest.bid)
  return _internal_bid();
}
inline void RecallRequest::set_bid(const std::string& value) {
  _internal_set_bid(value);
  // @@protoc_insertion_point(field_set:diaochan.RecallRequest.bid)
}
inline std::string* RecallRequest::mutable_bid() {
  // @@protoc_insertion_point(field_mutable:diaochan.RecallRequest.bid)
  return _internal_mutable_bid();
}
inline const std::string& RecallRequest::_internal_bid() const {
  return bid_.Get();
}
inline void RecallRequest::_internal_set_bid(const std::string& value) {
  
  bid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RecallRequest::set_bid(std::string&& value) {
  
  bid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:diaochan.RecallRequest.bid)
}
inline void RecallRequest::set_bid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:diaochan.RecallRequest.bid)
}
inline void RecallRequest::set_bid(const char* value,
    size_t size) {
  
  bid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:diaochan.RecallRequest.bid)
}
inline std::string* RecallRequest::_internal_mutable_bid() {
  
  return bid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RecallRequest::release_bid() {
  // @@protoc_insertion_point(field_release:diaochan.RecallRequest.bid)
  return bid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecallRequest::set_allocated_bid(std::string* bid) {
  if (bid != nullptr) {
    
  } else {
    
  }
  bid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:diaochan.RecallRequest.bid)
}

// string uid = 2;
inline void RecallRequest::clear_uid() {
  uid_.ClearToEmpty();
}
inline const std::string& RecallRequest::uid() const {
  // @@protoc_insertion_point(field_get:diaochan.RecallRequest.uid)
  return _internal_uid();
}
inline void RecallRequest::set_uid(const std::string& value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:diaochan.RecallRequest.uid)
}
inline std::string* RecallRequest::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:diaochan.RecallRequest.uid)
  return _internal_mutable_uid();
}
inline const std::string& RecallRequest::_internal_uid() const {
  return uid_.Get();
}
inline void RecallRequest::_internal_set_uid(const std::string& value) {
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RecallRequest::set_uid(std::string&& value) {
  
  uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:diaochan.RecallRequest.uid)
}
inline void RecallRequest::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:diaochan.RecallRequest.uid)
}
inline void RecallRequest::set_uid(const char* value,
    size_t size) {
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:diaochan.RecallRequest.uid)
}
inline std::string* RecallRequest::_internal_mutable_uid() {
  
  return uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RecallRequest::release_uid() {
  // @@protoc_insertion_point(field_release:diaochan.RecallRequest.uid)
  return uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecallRequest::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:diaochan.RecallRequest.uid)
}

// string mid = 3;
inline void RecallRequest::clear_mid() {
  mid_.ClearToEmpty();
}
inline const std::string& RecallRequest::mid() const {
  // @@protoc_insertion_point(field_get:diaochan.RecallRequest.mid)
  return _internal_mid();
}
inline void RecallRequest::set_mid(const std::string& value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:diaochan.RecallRequest.mid)
}
inline std::string* RecallRequest::mutable_mid() {
  // @@protoc_insertion_point(field_mutable:diaochan.RecallRequest.mid)
  return _internal_mutable_mid();
}
inline const std::string& RecallRequest::_internal_mid() const {
  return mid_.Get();
}
inline void RecallRequest::_internal_set_mid(const std::string& value) {
  
  mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RecallRequest::set_mid(std::string&& value) {
  
  mid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:diaochan.RecallRequest.mid)
}
inline void RecallRequest::set_mid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:diaochan.RecallRequest.mid)
}
inline void RecallRequest::set_mid(const char* value,
    size_t size) {
  
  mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:diaochan.RecallRequest.mid)
}
inline std::string* RecallRequest::_internal_mutable_mid() {
  
  return mid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RecallRequest::release_mid() {
  // @@protoc_insertion_point(field_release:diaochan.RecallRequest.mid)
  return mid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecallRequest::set_allocated_mid(std::string* mid) {
  if (mid != nullptr) {
    
  } else {
    
  }
  mid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:diaochan.RecallRequest.mid)
}

// string channel = 4;
inline void RecallRequest::clear_channel() {
  channel_.ClearToEmpty();
}
inline const std::string& RecallRequest::channel() const {
  // @@protoc_insertion_point(field_get:diaochan.RecallRequest.channel)
  return _internal_channel();
}
inline void RecallRequest::set_channel(const std::string& value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:diaochan.RecallRequest.channel)
}
inline std::string* RecallRequest::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:diaochan.RecallRequest.channel)
  return _internal_mutable_channel();
}
inline const std::string& RecallRequest::_internal_channel() const {
  return channel_.Get();
}
inline void RecallRequest::_internal_set_channel(const std::string& value) {
  
  channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RecallRequest::set_channel(std::string&& value) {
  
  channel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:diaochan.RecallRequest.channel)
}
inline void RecallRequest::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:diaochan.RecallRequest.channel)
}
inline void RecallRequest::set_channel(const char* value,
    size_t size) {
  
  channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:diaochan.RecallRequest.channel)
}
inline std::string* RecallRequest::_internal_mutable_channel() {
  
  return channel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RecallRequest::release_channel() {
  // @@protoc_insertion_point(field_release:diaochan.RecallRequest.channel)
  return channel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecallRequest::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:diaochan.RecallRequest.channel)
}

// string version = 5;
inline void RecallRequest::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& RecallRequest::version() const {
  // @@protoc_insertion_point(field_get:diaochan.RecallRequest.version)
  return _internal_version();
}
inline void RecallRequest::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:diaochan.RecallRequest.version)
}
inline std::string* RecallRequest::mutable_version() {
  // @@protoc_insertion_point(field_mutable:diaochan.RecallRequest.version)
  return _internal_mutable_version();
}
inline const std::string& RecallRequest::_internal_version() const {
  return version_.Get();
}
inline void RecallRequest::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RecallRequest::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:diaochan.RecallRequest.version)
}
inline void RecallRequest::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:diaochan.RecallRequest.version)
}
inline void RecallRequest::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:diaochan.RecallRequest.version)
}
inline std::string* RecallRequest::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RecallRequest::release_version() {
  // @@protoc_insertion_point(field_release:diaochan.RecallRequest.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecallRequest::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:diaochan.RecallRequest.version)
}

// .FeatList context = 6;
inline bool RecallRequest::_internal_has_context() const {
  return this != internal_default_instance() && context_ != nullptr;
}
inline bool RecallRequest::has_context() const {
  return _internal_has_context();
}
inline const ::FeatList& RecallRequest::_internal_context() const {
  const ::FeatList* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::FeatList&>(
      ::_FeatList_default_instance_);
}
inline const ::FeatList& RecallRequest::context() const {
  // @@protoc_insertion_point(field_get:diaochan.RecallRequest.context)
  return _internal_context();
}
inline void RecallRequest::unsafe_arena_set_allocated_context(
    ::FeatList* context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diaochan.RecallRequest.context)
}
inline ::FeatList* RecallRequest::release_context() {
  
  ::FeatList* temp = context_;
  context_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FeatList* RecallRequest::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:diaochan.RecallRequest.context)
  
  ::FeatList* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::FeatList* RecallRequest::_internal_mutable_context() {
  
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::FeatList>(GetArena());
    context_ = p;
  }
  return context_;
}
inline ::FeatList* RecallRequest::mutable_context() {
  // @@protoc_insertion_point(field_mutable:diaochan.RecallRequest.context)
  return _internal_mutable_context();
}
inline void RecallRequest::set_allocated_context(::FeatList* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context)->GetArena();
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:diaochan.RecallRequest.context)
}

// int32 num = 7;
inline void RecallRequest::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecallRequest::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecallRequest::num() const {
  // @@protoc_insertion_point(field_get:diaochan.RecallRequest.num)
  return _internal_num();
}
inline void RecallRequest::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void RecallRequest::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:diaochan.RecallRequest.num)
}

// bool debug = 8;
inline void RecallRequest::clear_debug() {
  debug_ = false;
}
inline bool RecallRequest::_internal_debug() const {
  return debug_;
}
inline bool RecallRequest::debug() const {
  // @@protoc_insertion_point(field_get:diaochan.RecallRequest.debug)
  return _internal_debug();
}
inline void RecallRequest::_internal_set_debug(bool value) {
  
  debug_ = value;
}
inline void RecallRequest::set_debug(bool value) {
  _internal_set_debug(value);
  // @@protoc_insertion_point(field_set:diaochan.RecallRequest.debug)
}

// -------------------------------------------------------------------

// RecallReply

// string bid = 1;
inline void RecallReply::clear_bid() {
  bid_.ClearToEmpty();
}
inline const std::string& RecallReply::bid() const {
  // @@protoc_insertion_point(field_get:diaochan.RecallReply.bid)
  return _internal_bid();
}
inline void RecallReply::set_bid(const std::string& value) {
  _internal_set_bid(value);
  // @@protoc_insertion_point(field_set:diaochan.RecallReply.bid)
}
inline std::string* RecallReply::mutable_bid() {
  // @@protoc_insertion_point(field_mutable:diaochan.RecallReply.bid)
  return _internal_mutable_bid();
}
inline const std::string& RecallReply::_internal_bid() const {
  return bid_.Get();
}
inline void RecallReply::_internal_set_bid(const std::string& value) {
  
  bid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RecallReply::set_bid(std::string&& value) {
  
  bid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:diaochan.RecallReply.bid)
}
inline void RecallReply::set_bid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:diaochan.RecallReply.bid)
}
inline void RecallReply::set_bid(const char* value,
    size_t size) {
  
  bid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:diaochan.RecallReply.bid)
}
inline std::string* RecallReply::_internal_mutable_bid() {
  
  return bid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RecallReply::release_bid() {
  // @@protoc_insertion_point(field_release:diaochan.RecallReply.bid)
  return bid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecallReply::set_allocated_bid(std::string* bid) {
  if (bid != nullptr) {
    
  } else {
    
  }
  bid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:diaochan.RecallReply.bid)
}

// int32 status = 2;
inline void RecallReply::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecallReply::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecallReply::status() const {
  // @@protoc_insertion_point(field_get:diaochan.RecallReply.status)
  return _internal_status();
}
inline void RecallReply::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void RecallReply::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:diaochan.RecallReply.status)
}

// string errmsg = 3;
inline void RecallReply::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& RecallReply::errmsg() const {
  // @@protoc_insertion_point(field_get:diaochan.RecallReply.errmsg)
  return _internal_errmsg();
}
inline void RecallReply::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:diaochan.RecallReply.errmsg)
}
inline std::string* RecallReply::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:diaochan.RecallReply.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& RecallReply::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void RecallReply::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RecallReply::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:diaochan.RecallReply.errmsg)
}
inline void RecallReply::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:diaochan.RecallReply.errmsg)
}
inline void RecallReply::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:diaochan.RecallReply.errmsg)
}
inline std::string* RecallReply::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RecallReply::release_errmsg() {
  // @@protoc_insertion_point(field_release:diaochan.RecallReply.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecallReply::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:diaochan.RecallReply.errmsg)
}

// repeated string mid = 4;
inline int RecallReply::_internal_mid_size() const {
  return mid_.size();
}
inline int RecallReply::mid_size() const {
  return _internal_mid_size();
}
inline void RecallReply::clear_mid() {
  mid_.Clear();
}
inline std::string* RecallReply::add_mid() {
  // @@protoc_insertion_point(field_add_mutable:diaochan.RecallReply.mid)
  return _internal_add_mid();
}
inline const std::string& RecallReply::_internal_mid(int index) const {
  return mid_.Get(index);
}
inline const std::string& RecallReply::mid(int index) const {
  // @@protoc_insertion_point(field_get:diaochan.RecallReply.mid)
  return _internal_mid(index);
}
inline std::string* RecallReply::mutable_mid(int index) {
  // @@protoc_insertion_point(field_mutable:diaochan.RecallReply.mid)
  return mid_.Mutable(index);
}
inline void RecallReply::set_mid(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:diaochan.RecallReply.mid)
  mid_.Mutable(index)->assign(value);
}
inline void RecallReply::set_mid(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:diaochan.RecallReply.mid)
  mid_.Mutable(index)->assign(std::move(value));
}
inline void RecallReply::set_mid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:diaochan.RecallReply.mid)
}
inline void RecallReply::set_mid(int index, const char* value, size_t size) {
  mid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:diaochan.RecallReply.mid)
}
inline std::string* RecallReply::_internal_add_mid() {
  return mid_.Add();
}
inline void RecallReply::add_mid(const std::string& value) {
  mid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:diaochan.RecallReply.mid)
}
inline void RecallReply::add_mid(std::string&& value) {
  mid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:diaochan.RecallReply.mid)
}
inline void RecallReply::add_mid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:diaochan.RecallReply.mid)
}
inline void RecallReply::add_mid(const char* value, size_t size) {
  mid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:diaochan.RecallReply.mid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RecallReply::mid() const {
  // @@protoc_insertion_point(field_list:diaochan.RecallReply.mid)
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RecallReply::mutable_mid() {
  // @@protoc_insertion_point(field_mutable_list:diaochan.RecallReply.mid)
  return &mid_;
}

// repeated float mscore = 5;
inline int RecallReply::_internal_mscore_size() const {
  return mscore_.size();
}
inline int RecallReply::mscore_size() const {
  return _internal_mscore_size();
}
inline void RecallReply::clear_mscore() {
  mscore_.Clear();
}
inline float RecallReply::_internal_mscore(int index) const {
  return mscore_.Get(index);
}
inline float RecallReply::mscore(int index) const {
  // @@protoc_insertion_point(field_get:diaochan.RecallReply.mscore)
  return _internal_mscore(index);
}
inline void RecallReply::set_mscore(int index, float value) {
  mscore_.Set(index, value);
  // @@protoc_insertion_point(field_set:diaochan.RecallReply.mscore)
}
inline void RecallReply::_internal_add_mscore(float value) {
  mscore_.Add(value);
}
inline void RecallReply::add_mscore(float value) {
  _internal_add_mscore(value);
  // @@protoc_insertion_point(field_add:diaochan.RecallReply.mscore)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RecallReply::_internal_mscore() const {
  return mscore_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RecallReply::mscore() const {
  // @@protoc_insertion_point(field_list:diaochan.RecallReply.mscore)
  return _internal_mscore();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RecallReply::_internal_mutable_mscore() {
  return &mscore_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RecallReply::mutable_mscore() {
  // @@protoc_insertion_point(field_mutable_list:diaochan.RecallReply.mscore)
  return _internal_mutable_mscore();
}

// repeated .FeatList mfeas = 6;
inline int RecallReply::_internal_mfeas_size() const {
  return mfeas_.size();
}
inline int RecallReply::mfeas_size() const {
  return _internal_mfeas_size();
}
inline ::FeatList* RecallReply::mutable_mfeas(int index) {
  // @@protoc_insertion_point(field_mutable:diaochan.RecallReply.mfeas)
  return mfeas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FeatList >*
RecallReply::mutable_mfeas() {
  // @@protoc_insertion_point(field_mutable_list:diaochan.RecallReply.mfeas)
  return &mfeas_;
}
inline const ::FeatList& RecallReply::_internal_mfeas(int index) const {
  return mfeas_.Get(index);
}
inline const ::FeatList& RecallReply::mfeas(int index) const {
  // @@protoc_insertion_point(field_get:diaochan.RecallReply.mfeas)
  return _internal_mfeas(index);
}
inline ::FeatList* RecallReply::_internal_add_mfeas() {
  return mfeas_.Add();
}
inline ::FeatList* RecallReply::add_mfeas() {
  // @@protoc_insertion_point(field_add:diaochan.RecallReply.mfeas)
  return _internal_add_mfeas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FeatList >&
RecallReply::mfeas() const {
  // @@protoc_insertion_point(field_list:diaochan.RecallReply.mfeas)
  return mfeas_;
}

// .FeatList otherfeas = 7;
inline bool RecallReply::_internal_has_otherfeas() const {
  return this != internal_default_instance() && otherfeas_ != nullptr;
}
inline bool RecallReply::has_otherfeas() const {
  return _internal_has_otherfeas();
}
inline const ::FeatList& RecallReply::_internal_otherfeas() const {
  const ::FeatList* p = otherfeas_;
  return p != nullptr ? *p : reinterpret_cast<const ::FeatList&>(
      ::_FeatList_default_instance_);
}
inline const ::FeatList& RecallReply::otherfeas() const {
  // @@protoc_insertion_point(field_get:diaochan.RecallReply.otherfeas)
  return _internal_otherfeas();
}
inline void RecallReply::unsafe_arena_set_allocated_otherfeas(
    ::FeatList* otherfeas) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(otherfeas_);
  }
  otherfeas_ = otherfeas;
  if (otherfeas) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diaochan.RecallReply.otherfeas)
}
inline ::FeatList* RecallReply::release_otherfeas() {
  
  ::FeatList* temp = otherfeas_;
  otherfeas_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FeatList* RecallReply::unsafe_arena_release_otherfeas() {
  // @@protoc_insertion_point(field_release:diaochan.RecallReply.otherfeas)
  
  ::FeatList* temp = otherfeas_;
  otherfeas_ = nullptr;
  return temp;
}
inline ::FeatList* RecallReply::_internal_mutable_otherfeas() {
  
  if (otherfeas_ == nullptr) {
    auto* p = CreateMaybeMessage<::FeatList>(GetArena());
    otherfeas_ = p;
  }
  return otherfeas_;
}
inline ::FeatList* RecallReply::mutable_otherfeas() {
  // @@protoc_insertion_point(field_mutable:diaochan.RecallReply.otherfeas)
  return _internal_mutable_otherfeas();
}
inline void RecallReply::set_allocated_otherfeas(::FeatList* otherfeas) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(otherfeas_);
  }
  if (otherfeas) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(otherfeas)->GetArena();
    if (message_arena != submessage_arena) {
      otherfeas = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, otherfeas, submessage_arena);
    }
    
  } else {
    
  }
  otherfeas_ = otherfeas;
  // @@protoc_insertion_point(field_set_allocated:diaochan.RecallReply.otherfeas)
}

// repeated string debuginfo = 8;
inline int RecallReply::_internal_debuginfo_size() const {
  return debuginfo_.size();
}
inline int RecallReply::debuginfo_size() const {
  return _internal_debuginfo_size();
}
inline void RecallReply::clear_debuginfo() {
  debuginfo_.Clear();
}
inline std::string* RecallReply::add_debuginfo() {
  // @@protoc_insertion_point(field_add_mutable:diaochan.RecallReply.debuginfo)
  return _internal_add_debuginfo();
}
inline const std::string& RecallReply::_internal_debuginfo(int index) const {
  return debuginfo_.Get(index);
}
inline const std::string& RecallReply::debuginfo(int index) const {
  // @@protoc_insertion_point(field_get:diaochan.RecallReply.debuginfo)
  return _internal_debuginfo(index);
}
inline std::string* RecallReply::mutable_debuginfo(int index) {
  // @@protoc_insertion_point(field_mutable:diaochan.RecallReply.debuginfo)
  return debuginfo_.Mutable(index);
}
inline void RecallReply::set_debuginfo(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:diaochan.RecallReply.debuginfo)
  debuginfo_.Mutable(index)->assign(value);
}
inline void RecallReply::set_debuginfo(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:diaochan.RecallReply.debuginfo)
  debuginfo_.Mutable(index)->assign(std::move(value));
}
inline void RecallReply::set_debuginfo(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  debuginfo_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:diaochan.RecallReply.debuginfo)
}
inline void RecallReply::set_debuginfo(int index, const char* value, size_t size) {
  debuginfo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:diaochan.RecallReply.debuginfo)
}
inline std::string* RecallReply::_internal_add_debuginfo() {
  return debuginfo_.Add();
}
inline void RecallReply::add_debuginfo(const std::string& value) {
  debuginfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:diaochan.RecallReply.debuginfo)
}
inline void RecallReply::add_debuginfo(std::string&& value) {
  debuginfo_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:diaochan.RecallReply.debuginfo)
}
inline void RecallReply::add_debuginfo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  debuginfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:diaochan.RecallReply.debuginfo)
}
inline void RecallReply::add_debuginfo(const char* value, size_t size) {
  debuginfo_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:diaochan.RecallReply.debuginfo)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RecallReply::debuginfo() const {
  // @@protoc_insertion_point(field_list:diaochan.RecallReply.debuginfo)
  return debuginfo_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RecallReply::mutable_debuginfo() {
  // @@protoc_insertion_point(field_mutable_list:diaochan.RecallReply.debuginfo)
  return &debuginfo_;
}

// -------------------------------------------------------------------

// StatusRequest

// -------------------------------------------------------------------

// StatusReply

// bool status = 1;
inline void StatusReply::clear_status() {
  status_ = false;
}
inline bool StatusReply::_internal_status() const {
  return status_;
}
inline bool StatusReply::status() const {
  // @@protoc_insertion_point(field_get:diaochan.StatusReply.status)
  return _internal_status();
}
inline void StatusReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void StatusReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:diaochan.StatusReply.status)
}

// repeated string detail = 2;
inline int StatusReply::_internal_detail_size() const {
  return detail_.size();
}
inline int StatusReply::detail_size() const {
  return _internal_detail_size();
}
inline void StatusReply::clear_detail() {
  detail_.Clear();
}
inline std::string* StatusReply::add_detail() {
  // @@protoc_insertion_point(field_add_mutable:diaochan.StatusReply.detail)
  return _internal_add_detail();
}
inline const std::string& StatusReply::_internal_detail(int index) const {
  return detail_.Get(index);
}
inline const std::string& StatusReply::detail(int index) const {
  // @@protoc_insertion_point(field_get:diaochan.StatusReply.detail)
  return _internal_detail(index);
}
inline std::string* StatusReply::mutable_detail(int index) {
  // @@protoc_insertion_point(field_mutable:diaochan.StatusReply.detail)
  return detail_.Mutable(index);
}
inline void StatusReply::set_detail(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:diaochan.StatusReply.detail)
  detail_.Mutable(index)->assign(value);
}
inline void StatusReply::set_detail(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:diaochan.StatusReply.detail)
  detail_.Mutable(index)->assign(std::move(value));
}
inline void StatusReply::set_detail(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  detail_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:diaochan.StatusReply.detail)
}
inline void StatusReply::set_detail(int index, const char* value, size_t size) {
  detail_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:diaochan.StatusReply.detail)
}
inline std::string* StatusReply::_internal_add_detail() {
  return detail_.Add();
}
inline void StatusReply::add_detail(const std::string& value) {
  detail_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:diaochan.StatusReply.detail)
}
inline void StatusReply::add_detail(std::string&& value) {
  detail_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:diaochan.StatusReply.detail)
}
inline void StatusReply::add_detail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  detail_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:diaochan.StatusReply.detail)
}
inline void StatusReply::add_detail(const char* value, size_t size) {
  detail_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:diaochan.StatusReply.detail)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StatusReply::detail() const {
  // @@protoc_insertion_point(field_list:diaochan.StatusReply.detail)
  return detail_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StatusReply::mutable_detail() {
  // @@protoc_insertion_point(field_mutable_list:diaochan.StatusReply.detail)
  return &detail_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace diaochan

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_diaochan_2eproto
