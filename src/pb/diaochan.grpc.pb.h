// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: diaochan.proto
// Original file comments:
// diaochan的接口定义
//
#ifndef GRPC_diaochan_2eproto__INCLUDED
#define GRPC_diaochan_2eproto__INCLUDED

#include "diaochan.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace diaochan {

class Diaochan final {
 public:
  static constexpr char const* service_full_name() {
    return "diaochan.Diaochan";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 根据导流物料排序。
    virtual ::grpc::Status Recall(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::diaochan::RecallReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>> AsyncRecall(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>>(AsyncRecallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>> PrepareAsyncRecall(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>>(PrepareAsyncRecallRaw(context, request, cq));
    }
    virtual ::grpc::Status RecallVvs(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::diaochan::RecallReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>> AsyncRecallVvs(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>>(AsyncRecallVvsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>> PrepareAsyncRecallVvs(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>>(PrepareAsyncRecallVvsRaw(context, request, cq));
    }
    virtual ::grpc::Status RecallEsTag(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::diaochan::RecallReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>> AsyncRecallEsTag(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>>(AsyncRecallEsTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>> PrepareAsyncRecallEsTag(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>>(PrepareAsyncRecallEsTagRaw(context, request, cq));
    }
    virtual ::grpc::Status RecallBlack(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::diaochan::RecallReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>> AsyncRecallBlack(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>>(AsyncRecallBlackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>> PrepareAsyncRecallBlack(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>>(PrepareAsyncRecallBlackRaw(context, request, cq));
    }
    virtual ::grpc::Status RecallDssm(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::diaochan::RecallReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>> AsyncRecallDssm(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>>(AsyncRecallDssmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>> PrepareAsyncRecallDssm(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>>(PrepareAsyncRecallDssmRaw(context, request, cq));
    }
    // 服务状态检查 TODO
    virtual ::grpc::Status Status(::grpc::ClientContext* context, const ::diaochan::StatusRequest& request, ::diaochan::StatusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::StatusReply>> AsyncStatus(::grpc::ClientContext* context, const ::diaochan::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::StatusReply>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::StatusReply>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::diaochan::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::StatusReply>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 根据导流物料排序。
      virtual void Recall(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Recall(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Recall(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RecallVvs(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RecallVvs(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RecallVvs(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RecallEsTag(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RecallEsTag(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RecallEsTag(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RecallBlack(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RecallBlack(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RecallBlack(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RecallDssm(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RecallDssm(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RecallDssm(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 服务状态检查 TODO
      virtual void Status(::grpc::ClientContext* context, const ::diaochan::StatusRequest* request, ::diaochan::StatusReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Status(::grpc::ClientContext* context, const ::diaochan::StatusRequest* request, ::diaochan::StatusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Status(::grpc::ClientContext* context, const ::diaochan::StatusRequest* request, ::diaochan::StatusReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>* AsyncRecallRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>* PrepareAsyncRecallRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>* AsyncRecallVvsRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>* PrepareAsyncRecallVvsRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>* AsyncRecallEsTagRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>* PrepareAsyncRecallEsTagRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>* AsyncRecallBlackRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>* PrepareAsyncRecallBlackRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>* AsyncRecallDssmRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::RecallReply>* PrepareAsyncRecallDssmRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::StatusReply>* AsyncStatusRaw(::grpc::ClientContext* context, const ::diaochan::StatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::diaochan::StatusReply>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::diaochan::StatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Recall(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::diaochan::RecallReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>> AsyncRecall(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>>(AsyncRecallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>> PrepareAsyncRecall(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>>(PrepareAsyncRecallRaw(context, request, cq));
    }
    ::grpc::Status RecallVvs(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::diaochan::RecallReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>> AsyncRecallVvs(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>>(AsyncRecallVvsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>> PrepareAsyncRecallVvs(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>>(PrepareAsyncRecallVvsRaw(context, request, cq));
    }
    ::grpc::Status RecallEsTag(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::diaochan::RecallReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>> AsyncRecallEsTag(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>>(AsyncRecallEsTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>> PrepareAsyncRecallEsTag(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>>(PrepareAsyncRecallEsTagRaw(context, request, cq));
    }
    ::grpc::Status RecallBlack(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::diaochan::RecallReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>> AsyncRecallBlack(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>>(AsyncRecallBlackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>> PrepareAsyncRecallBlack(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>>(PrepareAsyncRecallBlackRaw(context, request, cq));
    }
    ::grpc::Status RecallDssm(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::diaochan::RecallReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>> AsyncRecallDssm(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>>(AsyncRecallDssmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>> PrepareAsyncRecallDssm(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>>(PrepareAsyncRecallDssmRaw(context, request, cq));
    }
    ::grpc::Status Status(::grpc::ClientContext* context, const ::diaochan::StatusRequest& request, ::diaochan::StatusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::StatusReply>> AsyncStatus(::grpc::ClientContext* context, const ::diaochan::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::StatusReply>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::StatusReply>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::diaochan::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::diaochan::StatusReply>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Recall(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Recall(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Recall(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RecallVvs(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RecallVvs(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RecallVvs(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RecallEsTag(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RecallEsTag(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RecallEsTag(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RecallBlack(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RecallBlack(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RecallBlack(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RecallDssm(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RecallDssm(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RecallDssm(::grpc::ClientContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Status(::grpc::ClientContext* context, const ::diaochan::StatusRequest* request, ::diaochan::StatusReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Status(::grpc::ClientContext* context, const ::diaochan::StatusRequest* request, ::diaochan::StatusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Status(::grpc::ClientContext* context, const ::diaochan::StatusRequest* request, ::diaochan::StatusReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* AsyncRecallRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* PrepareAsyncRecallRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* AsyncRecallVvsRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* PrepareAsyncRecallVvsRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* AsyncRecallEsTagRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* PrepareAsyncRecallEsTagRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* AsyncRecallBlackRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* PrepareAsyncRecallBlackRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* AsyncRecallDssmRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::diaochan::RecallReply>* PrepareAsyncRecallDssmRaw(::grpc::ClientContext* context, const ::diaochan::RecallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::diaochan::StatusReply>* AsyncStatusRaw(::grpc::ClientContext* context, const ::diaochan::StatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::diaochan::StatusReply>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::diaochan::StatusRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Recall_;
    const ::grpc::internal::RpcMethod rpcmethod_RecallVvs_;
    const ::grpc::internal::RpcMethod rpcmethod_RecallEsTag_;
    const ::grpc::internal::RpcMethod rpcmethod_RecallBlack_;
    const ::grpc::internal::RpcMethod rpcmethod_RecallDssm_;
    const ::grpc::internal::RpcMethod rpcmethod_Status_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 根据导流物料排序。
    virtual ::grpc::Status Recall(::grpc::ServerContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response);
    virtual ::grpc::Status RecallVvs(::grpc::ServerContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response);
    virtual ::grpc::Status RecallEsTag(::grpc::ServerContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response);
    virtual ::grpc::Status RecallBlack(::grpc::ServerContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response);
    virtual ::grpc::Status RecallDssm(::grpc::ServerContext* context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response);
    // 服务状态检查 TODO
    virtual ::grpc::Status Status(::grpc::ServerContext* context, const ::diaochan::StatusRequest* request, ::diaochan::StatusReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Recall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Recall() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Recall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Recall(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecall(::grpc::ServerContext* context, ::diaochan::RecallRequest* request, ::grpc::ServerAsyncResponseWriter< ::diaochan::RecallReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecallVvs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecallVvs() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RecallVvs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallVvs(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecallVvs(::grpc::ServerContext* context, ::diaochan::RecallRequest* request, ::grpc::ServerAsyncResponseWriter< ::diaochan::RecallReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecallEsTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecallEsTag() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RecallEsTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallEsTag(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecallEsTag(::grpc::ServerContext* context, ::diaochan::RecallRequest* request, ::grpc::ServerAsyncResponseWriter< ::diaochan::RecallReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecallBlack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecallBlack() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RecallBlack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallBlack(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecallBlack(::grpc::ServerContext* context, ::diaochan::RecallRequest* request, ::grpc::ServerAsyncResponseWriter< ::diaochan::RecallReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecallDssm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecallDssm() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RecallDssm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallDssm(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecallDssm(::grpc::ServerContext* context, ::diaochan::RecallRequest* request, ::grpc::ServerAsyncResponseWriter< ::diaochan::RecallReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Status() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::diaochan::StatusRequest* /*request*/, ::diaochan::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::diaochan::StatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::diaochan::StatusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Recall<WithAsyncMethod_RecallVvs<WithAsyncMethod_RecallEsTag<WithAsyncMethod_RecallBlack<WithAsyncMethod_RecallDssm<WithAsyncMethod_Status<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Recall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Recall() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::diaochan::RecallRequest, ::diaochan::RecallReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response) { return this->Recall(context, request, response); }));}
    void SetMessageAllocatorFor_Recall(
        ::grpc::experimental::MessageAllocator< ::diaochan::RecallRequest, ::diaochan::RecallReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::diaochan::RecallRequest, ::diaochan::RecallReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Recall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Recall(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Recall(
      ::grpc::CallbackServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Recall(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RecallVvs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RecallVvs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::diaochan::RecallRequest, ::diaochan::RecallReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response) { return this->RecallVvs(context, request, response); }));}
    void SetMessageAllocatorFor_RecallVvs(
        ::grpc::experimental::MessageAllocator< ::diaochan::RecallRequest, ::diaochan::RecallReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::diaochan::RecallRequest, ::diaochan::RecallReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RecallVvs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallVvs(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecallVvs(
      ::grpc::CallbackServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecallVvs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RecallEsTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RecallEsTag() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::diaochan::RecallRequest, ::diaochan::RecallReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response) { return this->RecallEsTag(context, request, response); }));}
    void SetMessageAllocatorFor_RecallEsTag(
        ::grpc::experimental::MessageAllocator< ::diaochan::RecallRequest, ::diaochan::RecallReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::diaochan::RecallRequest, ::diaochan::RecallReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RecallEsTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallEsTag(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecallEsTag(
      ::grpc::CallbackServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecallEsTag(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RecallBlack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RecallBlack() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::diaochan::RecallRequest, ::diaochan::RecallReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response) { return this->RecallBlack(context, request, response); }));}
    void SetMessageAllocatorFor_RecallBlack(
        ::grpc::experimental::MessageAllocator< ::diaochan::RecallRequest, ::diaochan::RecallReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::diaochan::RecallRequest, ::diaochan::RecallReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RecallBlack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallBlack(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecallBlack(
      ::grpc::CallbackServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecallBlack(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RecallDssm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RecallDssm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::diaochan::RecallRequest, ::diaochan::RecallReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::diaochan::RecallRequest* request, ::diaochan::RecallReply* response) { return this->RecallDssm(context, request, response); }));}
    void SetMessageAllocatorFor_RecallDssm(
        ::grpc::experimental::MessageAllocator< ::diaochan::RecallRequest, ::diaochan::RecallReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::diaochan::RecallRequest, ::diaochan::RecallReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RecallDssm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallDssm(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecallDssm(
      ::grpc::CallbackServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecallDssm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Status() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::diaochan::StatusRequest, ::diaochan::StatusReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::diaochan::StatusRequest* request, ::diaochan::StatusReply* response) { return this->Status(context, request, response); }));}
    void SetMessageAllocatorFor_Status(
        ::grpc::experimental::MessageAllocator< ::diaochan::StatusRequest, ::diaochan::StatusReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::diaochan::StatusRequest, ::diaochan::StatusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::diaochan::StatusRequest* /*request*/, ::diaochan::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Status(
      ::grpc::CallbackServerContext* /*context*/, const ::diaochan::StatusRequest* /*request*/, ::diaochan::StatusReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Status(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::diaochan::StatusRequest* /*request*/, ::diaochan::StatusReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Recall<ExperimentalWithCallbackMethod_RecallVvs<ExperimentalWithCallbackMethod_RecallEsTag<ExperimentalWithCallbackMethod_RecallBlack<ExperimentalWithCallbackMethod_RecallDssm<ExperimentalWithCallbackMethod_Status<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Recall<ExperimentalWithCallbackMethod_RecallVvs<ExperimentalWithCallbackMethod_RecallEsTag<ExperimentalWithCallbackMethod_RecallBlack<ExperimentalWithCallbackMethod_RecallDssm<ExperimentalWithCallbackMethod_Status<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Recall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Recall() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Recall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Recall(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecallVvs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecallVvs() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RecallVvs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallVvs(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecallEsTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecallEsTag() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RecallEsTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallEsTag(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecallBlack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecallBlack() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RecallBlack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallBlack(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecallDssm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecallDssm() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RecallDssm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallDssm(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Status() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::diaochan::StatusRequest* /*request*/, ::diaochan::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Recall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Recall() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Recall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Recall(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecall(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecallVvs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecallVvs() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RecallVvs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallVvs(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecallVvs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecallEsTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecallEsTag() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RecallEsTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallEsTag(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecallEsTag(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecallBlack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecallBlack() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RecallBlack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallBlack(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecallBlack(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecallDssm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecallDssm() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RecallDssm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallDssm(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecallDssm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Status() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::diaochan::StatusRequest* /*request*/, ::diaochan::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Recall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Recall() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Recall(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Recall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Recall(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Recall(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Recall(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RecallVvs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RecallVvs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecallVvs(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RecallVvs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallVvs(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecallVvs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecallVvs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RecallEsTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RecallEsTag() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecallEsTag(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RecallEsTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallEsTag(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecallEsTag(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecallEsTag(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RecallBlack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RecallBlack() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecallBlack(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RecallBlack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallBlack(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecallBlack(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecallBlack(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RecallDssm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RecallDssm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecallDssm(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RecallDssm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecallDssm(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RecallDssm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RecallDssm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Status() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Status(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::diaochan::StatusRequest* /*request*/, ::diaochan::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Status(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Status(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Recall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Recall() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::diaochan::RecallRequest, ::diaochan::RecallReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::diaochan::RecallRequest, ::diaochan::RecallReply>* streamer) {
                       return this->StreamedRecall(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Recall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Recall(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecall(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::diaochan::RecallRequest,::diaochan::RecallReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecallVvs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecallVvs() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::diaochan::RecallRequest, ::diaochan::RecallReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::diaochan::RecallRequest, ::diaochan::RecallReply>* streamer) {
                       return this->StreamedRecallVvs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecallVvs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecallVvs(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecallVvs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::diaochan::RecallRequest,::diaochan::RecallReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecallEsTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecallEsTag() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::diaochan::RecallRequest, ::diaochan::RecallReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::diaochan::RecallRequest, ::diaochan::RecallReply>* streamer) {
                       return this->StreamedRecallEsTag(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecallEsTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecallEsTag(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecallEsTag(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::diaochan::RecallRequest,::diaochan::RecallReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecallBlack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecallBlack() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::diaochan::RecallRequest, ::diaochan::RecallReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::diaochan::RecallRequest, ::diaochan::RecallReply>* streamer) {
                       return this->StreamedRecallBlack(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecallBlack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecallBlack(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecallBlack(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::diaochan::RecallRequest,::diaochan::RecallReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecallDssm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecallDssm() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::diaochan::RecallRequest, ::diaochan::RecallReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::diaochan::RecallRequest, ::diaochan::RecallReply>* streamer) {
                       return this->StreamedRecallDssm(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecallDssm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecallDssm(::grpc::ServerContext* /*context*/, const ::diaochan::RecallRequest* /*request*/, ::diaochan::RecallReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecallDssm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::diaochan::RecallRequest,::diaochan::RecallReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Status() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::diaochan::StatusRequest, ::diaochan::StatusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::diaochan::StatusRequest, ::diaochan::StatusReply>* streamer) {
                       return this->StreamedStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::diaochan::StatusRequest* /*request*/, ::diaochan::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::diaochan::StatusRequest,::diaochan::StatusReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Recall<WithStreamedUnaryMethod_RecallVvs<WithStreamedUnaryMethod_RecallEsTag<WithStreamedUnaryMethod_RecallBlack<WithStreamedUnaryMethod_RecallDssm<WithStreamedUnaryMethod_Status<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Recall<WithStreamedUnaryMethod_RecallVvs<WithStreamedUnaryMethod_RecallEsTag<WithStreamedUnaryMethod_RecallBlack<WithStreamedUnaryMethod_RecallDssm<WithStreamedUnaryMethod_Status<Service > > > > > > StreamedService;
};

}  // namespace diaochan


#endif  // GRPC_diaochan_2eproto__INCLUDED
